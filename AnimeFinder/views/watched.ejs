<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AnimeFinder</title>
    <link rel="stylesheet" href="/style/style.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css" integrity="sha384-tViUnnbYAV00FLIhhi3v/dWt3Jxw4gZQcNoSCxCIFNJVCx7/D55/wXsrNIRANwdD" crossorigin="anonymous">
</head>
<style>
        html, body {
        height: 100%; /* O corpo ocupa 100% da altura da janela */
        margin: 0;
        display: flex;
        flex-direction: column;
    }

    .container-fluid {
        flex: 1; /* Faz o conteúdo principal ocupar o espaço disponível */
    }

    footer {
        background-color: #2e2e2e; /* Vermelho escuro */
        color: #ffcccc; /* Texto branco */
        border-top: 2px solid #3b3131; /* Borda de vermelho intermediário */
        padding: 1rem 0;
        font-size: 0.9rem;
        text-align: center;
        width: 100%;
    }

    .card-container {
        display: flex;
        flex-wrap: wrap;
        gap: 16px;
        justify-content: flex-start; /* Pode ajustar conforme a necessidade */
    }

    .card {
        display: flex;
        flex-direction: column; /* Organiza os elementos em coluna */
        align-items: center; /* Centraliza os elementos horizontalmente */
        width: 200px; /* Garante a largura consistente */
    }

    .card img {
        height: 290px;
        width: 200px;
        object-fit: cover; /* Garante proporção correta */
        border-radius: 8px; /* Deixa as bordas arredondadas */
    }

    .card .delete-btn {
        margin-top: 8px;
        width: 100%; /* O botão ocupa toda a largura do card */
        text-align: center;
    }

    h1 {
        font-family: "Oswald", sans-serif;
    }


    /*  @media (max-width: 991px) {
    li {
        color: rgb(255, 255, 255);
        background-color: rgb(240, 186, 186);
    }

    a.nav-link {
        font-weight: bold;
        color: rgb(34, 33, 33);
        padding: 10px;
        display: block;
    }

    
    li:not(:last-child) a.nav-link {
        border-bottom: 1px solid #ccc;
    } 
} */
</style>
<body>
    <div class="container-fluid">
        <div class="menu">
            <nav class="navbar navbar-expand-lg navbar-light">
                <a href="/" class="navbar-brand">
                    <img src="/images/Logo.png" alt="Logo">
                </a>
    
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>                
                <div class="collapse navbar-collapse" id="navbarNav">
                    <ul class="navbar-nav ml-auto"> 
                        <li class="nav-item active"> 
                            <a class="nav-link" href="https://berghzg.com">About</a> 
                        </li> 
                        <li class="nav-item"> 
                            <a class="nav-link" href="/search">Find</a>
                        </li> 
                        <li class="nav-item"> 
                            <a class="nav-link" href="https://berghzg.com/projects">Other Projects</a> 
                        </li>
                    </ul>
                </div>
            </nav>
        </div>
    
        <% if (watchedAnimes && watchedAnimes.length > 0) { %>
            <div class="vaida">
                <h1>My List</h1>
                <div class="butFit">
                    <button onclick="filterAnimes('All')">All <span class="num" id="all-count">0</span></button>
                    <button onclick="filterAnimes('Watching')">Watching <span class="num" id="watching-count">0</span></button>
                    <button onclick="filterAnimes('Dropped')">Dropped <span class="num" id="dropped-count">0</span></button>
                    <button onclick="filterAnimes('Finished')">Finished <span class="num" id="finished-count">0</span></button>
                    <button onclick="filterAnimes('Favorite')">Favorites <span class="num" id="favorite-count">0</span></button>
                </div>    
            
            
                <div class="card-container">
                    <% watchedAnimes.forEach((anime) => { %>
                        <div class="card" data-id="<%= anime.id %>" data-status="<%= anime.status %>" data-favorite="<%= anime.favorite %>">
                            <a href="/details/<%= encodeURIComponent(anime.title) %>">
                                <img src="<%= anime.coverImage %>" class="card-img-top" alt="<%= anime.title %>">
                            </a>
                            <button class="delete-btn" onclick="deleteAnime('<%= anime.id %>')">Deletar</button>
                        </div>
                    <% }) %>
                </div>               
            </div>          
        <% } %>
    </div>
    <%- include('partials/footer') %>
</body>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
<script>
    function updateCounters() {
        const cards = document.querySelectorAll('.card');
        const allCount = cards.length; // Total de cards
        const watchingCount = Array.from(cards).filter(card => card.dataset.status === 'Watching').length;
        const droppedCount = Array.from(cards).filter(card => card.dataset.status === 'Dropped').length;
        const finishedCount = Array.from(cards).filter(card => card.dataset.status === 'Finished').length;
        const favoriteCount = Array.from(cards).filter(card => card.dataset.favorite === 'true').length;

        // Atualiza os contadores no HTML
        document.getElementById('all-count').textContent = allCount;
        document.getElementById('watching-count').textContent = watchingCount;
        document.getElementById('dropped-count').textContent = droppedCount;
        document.getElementById('finished-count').textContent = finishedCount;
        document.getElementById('favorite-count').textContent = favoriteCount;
    }

    function filterAnimes(filter) {
        const cards = document.querySelectorAll('.card');

        cards.forEach(card => {
            const status = card.dataset.status;
            const favorite = card.dataset.favorite === 'true';

            // Lógica de exibição com base no filtro
            if (
                filter === 'All' ||
                (filter === 'Watching' && status === 'Watching') ||
                (filter === 'Dropped' && status === 'Dropped') ||
                (filter === 'Finished' && status === 'Finished') ||
                (filter === 'Favorite' && favorite)
            ) {
                card.style.display = 'flex'; // Mostra o card
            } else {
                card.style.display = 'none'; // Esconde o card
            }
        });

        // Atualizar o layout dos cards após o filtro
        const cardContainer = document.querySelector('.card-container');
        if (cardContainer) {
            cardContainer.style.display = 'none'; // Força reflow
            setTimeout(() => {
                cardContainer.style.display = ''; // Restaura o layout
            }, 0);
        }
    }


    // Atualiza os contadores na carga inicial da página
    document.addEventListener('DOMContentLoaded', updateCounters);

    function deleteAnime(animeId) {
        if (!confirm("Tem certeza de que deseja deletar este anime?")) return;

        fetch(`/delete-watched/${animeId}`, { method: 'DELETE' })
            .then(response => {
                if (response.ok) {
                    // Remover o card da interface
                    const card = document.querySelector(`.card[data-id="${animeId}"]`);
                    if (card) {
                        card.remove();
                        updateCounters(); // Atualiza os contadores

                        // Atualizar layout
                        const cardContainer = document.querySelector('.card-container');
                        if (cardContainer) {
                            cardContainer.style.display = 'none';
                            setTimeout(() => {
                                cardContainer.style.display = '';
                            }, 0);
                        }
                    }
                } else {
                    console.error('Falha ao deletar o anime.');
                }
            })
            .catch(error => console.error('Erro:', error));
    }
</script>
</html>